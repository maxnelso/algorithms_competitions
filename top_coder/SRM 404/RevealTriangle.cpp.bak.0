#include <vector>
#include <list>
#include <fstream>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <iterator>

#if DEBUG
#include "prettyprint.hpp"
#define print_container(c) cout << c << endl;
#endif

using namespace std;

class RevealTriangle {
  public: vector<string> calcTriangle(vector<string> questionMarkTriangle);
};

char get_new(char a, char b) {
  int new_a = a - '0';
  int new_b = b - '0';
  for (int i = 0; i <= 9; i++) {
    //string s = to_string(new_b + i);
  }
  return 'a';
}


vector<string> RevealTriangle::calcTriangle(vector<string> questionMarkTriangle) {
  vector<string> built;
  return built;
}

// CUT begin
//------------------------------------------------------------------------------
const double CASE_TIME_OUT = 2.0;

bool disabledTest(int x)
{
    return x < 0;
}
template<class I, class O> vector<pair<I,O>> getTestCases() { return {
    { { {"4??","?2","1"} }, { {"457","92","1"} } },
    { { {"1"} }, { {"1"} } },
    { { {"???2","??2","?2","2"} }, { {"0002","002","02","2"} } },
    { { {"??5?","??9","?4","6"} }, { {"7054","759","24","6"} } },
    // Your custom test goes here:
    //{ { {}}, {} },
};}

//------------------------------------------------------------------------------
// Tester code:
    //#define DISABLE_THREADS
    #include "../tester.cpp"
    struct input {
        vector<string> p0;

        vector<string> run(RevealTriangle* x) {
            return x->calcTriangle(p0);
        }
        void print() { Tester::printArgs(p0); }
    };
    
    int main() {
        return Tester::runTests<RevealTriangle>(
            getTestCases<input, Tester::output<vector<string>>>(), disabledTest, 
            250, 1400291172, CASE_TIME_OUT, Tester::COMPACT_REPORT
        );
    }
// CUT end
