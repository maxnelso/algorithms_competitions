#include <vector>
#include <fstream>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <iterator>
#define print_vector(a) cout << "{"; for (int i = 0; i < a.size(); i++) { if (i == a.size() - 1) {cout << a[i];} else { cout << a[i] << ",";}} cout << "}n";
using namespace std;

class KingdomAndDice {
  public: double newFairness(vector<int> firstDie, vector<int> secondDie, int X);
};

double KingdomAndDice::newFairness(vector<int> firstDie, vector<int> secondDie, int X) {
  return 0.0;
}

// CUT begin
//------------------------------------------------------------------------------
const double CASE_TIME_OUT = 2.0;

bool disabledTest(int x)
{
    return x < 3;
}
template<class I, class O> vector<pair<I,O>> getTestCases() { return {
    { { {0,2,7,0}, {6,3,8,10}, 12 }, {0.4375} },
    { { {0,2,7,0}, {6,3,8,10}, 10 }, {0.375} },
    { { {0,0}, {5,8}, 47 }, {0.5} },
    { { {19,50,4}, {26,100,37}, 1000 }, {0.2222222222222222} },
    { { {6371,0,6256,1852,0,0,6317,3004,5218,9012}, {1557,6318,1560,4519,2012,6316,6315,1559,8215,1561}, 10000 }, {0.49} },
    // Your custom test goes here:
    //{ { {}, {}, }, {} },
};}

//------------------------------------------------------------------------------
// Tester code:
    //#define DISABLE_THREADS
    #include "tester.cpp"
    struct input {
        vector<int> p0;vector<int> p1;int p2;

        double run(KingdomAndDice* x) {
            return x->newFairness(p0,p1,p2);
        }
        void print() { Tester::printArgs(p0,p1,p2); }
    };
    
    int main() {
        return Tester::runTests<KingdomAndDice>(
            getTestCases<input, Tester::output<double>>(), disabledTest, 
            450, 1397943456, CASE_TIME_OUT, Tester::COMPACT_REPORT
        );
    }
// CUT end
