#include <vector>
#include <list>
#include <fstream>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <iterator>

#if DEBUG
#include "prettyprint.hpp"
#define print_container(c) cout << c << endl;
#endif

using namespace std;

class Egalitarianism3Easy {
  public: int maxCities(int n, vector<int> a, vector<int> b, vector<int> len);
};

int Egalitarianism3Easy::maxCities(int n, vector<int> a, vector<int> b, vector<int> len) {
  return 0;
}

// CUT begin
//------------------------------------------------------------------------------
const double CASE_TIME_OUT = 2.0;

bool disabledTest(int x)
{
    return x < 0;
}
template<class I, class O> vector<pair<I,O>> getTestCases() { return {
    { { 4, {1,1,1}, {2,3,4}, {1,1,1} }, {3} },
    { { 6, {1,2,3,2,3}, {2,3,4,5,6}, {2,1,3,2,3} }, {3} },
    { { 10, {1,1,1,1,1,1,1,1,1}, {2,3,4,5,6,7,8,9,10}, {1000,1000,1000,1000,1000,1000,1000,1000,1000} }, {9} },
    { { 2, {1}, {2}, {3} }, {2} },
    { { 1, {}, {}, {} }, {1} },
    // Your custom test goes here:
    //{ { , {}, {}, {}}, {} },
};}

//------------------------------------------------------------------------------
// Tester code:
    //#define DISABLE_THREADS
    #include "../tester.cpp"
    struct input {
        int p0;vector<int> p1;vector<int> p2;vector<int> p3;

        int run(Egalitarianism3Easy* x) {
            return x->maxCities(p0,p1,p2,p3);
        }
        void print() { Tester::printArgs(p0,p1,p2,p3); }
    };
    
    int main() {
        return Tester::runTests<Egalitarianism3Easy>(
            getTestCases<input, Tester::output<int>>(), disabledTest, 
            500, 1408729801, CASE_TIME_OUT, Tester::COMPACT_REPORT
        );
    }
// CUT end
